{
  "tokenBalance": {
    "prefix": "tokenBalance",
    "body": [
      "const balance = async () => {",
      "  try {",
      "    await token.balance();",
      "  } catch (error) {",
      "    console.log('Failed to check balance. Error: ', error);",
      "  }",
      "};",
      "",
      "balance();"
    ],
    "description": "Get the balance of a token"
  },
  "tokenBalanceOf": {
    "prefix": "tokenBalanceOf",
    "body": [
      "const balanceOf = async (address) => {",
      "  try {",
      "    await token.balanceOf(address);",
      "  } catch (error) {",
      "    console.log('Failed to check balance of. Error: ', error);",
      "  }",
      "};",
      "",
      "balanceOf(\"<SPENDER_ADDRESS>\");"
    ],
    "description": "Get the balance of a token for a specific address"
  },
  "tokenBurn": {
    "prefix": "tokenBurn",
    "body": [
      "const burn = async (amount) => {",
      "  try {",
      "    await token.burn(ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to burn. Error: ', error);",
      "  } ",
      "};",
      "",
      "burn('<AMOUNT_TO_BURN>');"
    ],
    "description": "Burn tokens owned by the owner"
  },
  "tokenBurnFrom": {
    "prefix": "tokenBurnFrom",
    "body": [
      "const burnFrom = async (from, amount) => {",
      "  try {",
      "    await token.burnFrom(from, ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to burn from. Error: ', error);",
      "  }",
      "};",
      "",
      "burnFrom(\"<SPENDER_ADDRESS>\", '<AMOUNT_TO_BURN>');"
    ],
    "description": "Burn tokens owned by a specific address"
  },
  "tokenGet": {
    "prefix": "tokenGet",
    "body": [
      "const get = async () => {",
      "  try {",
      "    await token.get();",
      "  } catch (error) {",
      "    console.log('Failed to get. Error: ', error);",
      "  }",
      "};",
      "",
      "get();"
    ],
    "description": "Get details about a token module"
  },
  "tokenGetAllHolderBalances": {
    "prefix": "tokenGetAllHolderBalances",
    "body": [
      "const getAllHolderBalances = async () => {",
      "  try {",
      "    await token.getAllHolderBalances();  ",
      "  } catch (error) {",
      "    console.log('Failed to get all holder balances. Error: ', error);",
      "  }",
      "};",
      "  ",
      "getAllHolderBalances();"
    ],
    "description": "Get all the balances of all holders"
  },
  "tokenGetDelegation": {
    "prefix": "tokenGetDelegation",
    "body": [
      "const getDelegation = async () => {  ",
      "  try {",
      "    await token.getDelegation();",
      "  } catch (error) {",
      "    console.log('Failed to get delegation. Error: ', error);",
      "  }",
      "};",
      "",
      "getDelegation();"
    ],
    "description": "Get the delegation of a token"
  },
  "tokenGetDelegationOf": {
    "prefix": "tokenGetDelegationOf",
    "body": [
      "const getDelegationOf = async (account) => {  ",
      "  try {",
      "    await token.getDelegationOf(account);",
      "  } catch (error) {",
      "    console.log('Failed to get delegation of. Error: ', error);",
      "  }",
      "  };",
      "  ",
      "getDelegationOf(\"<SPENDER_ADDRESS>\");"
    ],
    "description": "Get the delegation of a token for a specific address"
  },
  "tokengetValue": {
    "prefix": "tokengetValue",
    "body": [
      "const getValue = async (value) => {",
      "  try {",
      "    await token.getValue(ethers.utils.parseEther(value));",
      "  } catch (error) {",
      "    console.log('Failed to get value. Error: ', error);",
      "  }",
      "};",
      "",
      "getValue('<VALUE>');"
    ],
    "description": "Get the value for the specified amount of a token"
  },
  "getVoteBalance": {
    "prefix": "getVoteBalance",
    "body": [
      "const getVoteBalance = async () => {",
      "  try {",
      "    await token.getVoteBalance();",
      "  } catch (error) {",
      "    console.log('Failed to get vote balance. Error: ', error);",
      "  }",
      "};",
      "",
      "getVoteBalance();"
    ],
    "description": "Get information of the vote balance for yourself"
  },
  "getVoteBalanceOf": {
    "prefix": "getVoteBalanceOf",
    "body": [
      "const getVoteBalanceOf = async (account) => {  ",
      "  try {",
      "    await token.getVoteBalanceOf(account);",
      "  } catch (error) {",
      "    console.log('Failed to get vote balance of. Error: ', error);",
      "  }",
      "};",
      "",
      "getVoteBalanceOf(\"<SPENDER_ADDRESS>\");"
    ],
    "description": "Get information about the vote balance for the specified address"
  },
  "mintToken": {
    "prefix": "mintToken",
    "body": [
      "const mint = async (amount) => { ",
      "  try { ",
      "    await token.mint(ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to mint. Error: ', error);",
      "  }",
      "};",
      "",
      "mint('<AMOUNT_TO_MINT>');"
    ],
    "description": "Mint specific amount of tokens"
  },
  "tokenMintBatchTo": {
    "prefix": "tokenMintBatchTo",
    "body": [
      "const mintBatchTo = async (batchTo) => { ",
      "  try { ",
      "    await token.mintBatchTo(batchTo);",
      "  } catch (error) {",
      "    console.log('Failed to mint batch to. Error: ', error);",
      "  }",
      "};",
      "",
      "const example = [",
      "  {",
      "    address: \"<SPENDER_ADDRESS>\",",
      "    amount: ethers.utils.parseEther(\"1\")",
      "  },",
      "  {",
      "    address: \"<SPENDER_ADDRESS_2>\",",
      "    amount: ethers.utils.parseEther(\"5\")",
      "  }",
      "]",
      "",
      "",
      "mintBatchTo(example);"
    ],
    "description": "Mint specific amount of tokens to multiple addresses in a batch"
  },
  "tokenMintTo": {
    "prefix": "tokenMintTo",
    "body": [
      "const mintTo = async (to, amount) => {  ",
      "  try { ",
      "    await token.mintTo(to, amount);",
      "  } catch (error) {",
      "    console.log('Failed to mint to. Error: ', error);",
      "  }",
      "};",
      "",
      "mintTo(\"<SPENDER_ADDRESS>\", ethers.utils.parseEther(\"1\"));"
    ],
    "description": "Mint specific amount of tokens to a specific address"
  },
  "tokenTotalSupply": {
    "prefix": "tokenTotalSupply",
    "body": [
      "const totalSupply = async () => {  ",
      "  try {",
      "    await token.totalSupply();",
      "  } catch (error) {",
      "    console.log('Failed to get total supply. Error: ', error);",
      "  }",
      "};",
      "",
      "totalSupply();"
    ],
    "description": "Get the total supply of a token module"
  },
  "tokenTransfer": {
    "prefix": "tokenTransfer",
    "body": [
      "const transfer = async (to, amount) => {  ",
      "  try {",
      "    await token.transfer(to, ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to transfer. Error: ', error);",
      "  }",
      "};",
      "",
      "transfer(\"<SPENDER_ADDRESS>\", '<AMOUNT_TO_TRANSFER>');"
    ],
    "description": "Transfer specific amount of tokens to a specific address"
  },
  "tokenTransferBatch": {
    "prefix": "tokenTransferBatch",
    "body": [
      "const transferBatch = async (batch) => {  ",
      "  try {",
      "    await token.transferBatch(batch);",
      "  } catch (error) {",
      "    console.log('Failed to transfer batch. Error: ', error);",
      "  }",
      "};",
      "",
      "const example = [",
      "  {",
      "      address: \"<SPENDER_ADDRESS>\",",
      "      amount: ethers.utils.parseEther(\"2\")",
      "  },",
      "  {",
      "      address: \"<SPENDER_ADDRESS_2>\",",
      "      amount: ethers.utils.parseEt(\"1\")",
      "  }",
      "]",
      "",
      "",
      "transferBatch(example);"
    ],
    "description": "Transfer specific amounts of tokens to multiple addresses in a batch"
  },
  "tokenTransferFrom": {
    "prefix": "tokenTransferFrom",
    "body": [
      "const transferFrom = async (from, to, amount) => { ",
      "  try { ",
      "    await token.transferFrom(from, to, ethers.utils.parseEther(amount));",
      "  } catch (error) {",
      "    console.log('Failed to transfer from. Error: ', error);",
      "  }",
      "};",
      "",
      "transferFrom(\"<SPENDER_ADDRESS>\", \"<SPENDER_ADDRESS_2>\", '<AMOUNT_TO_TRANSFER>');"
    ],
    "description": "Transfer specific amount of tokens from an address to another address"
  },
  "tokenTransferFromBatch": {
    "prefix": "tokenTransferFromBatch",
    "body": [
      "const transferFromBatch = async (batch) => {  ",
      "  try {",
      "    await token.transferFromBatch(batch);",
      "  } catch (error) {",
      "    console.log('Failed to trasnfer from batch. Error: ', error);",
      "  }",
      "};",
      "",
      "const example = [",
      "  {",
      "      address: \"<TO_ADDRESS>\",",
      "      amount: ethers.utils.parseEther(\"1\"),",
      "      fromAddress: \"<FROM_ADDRESS>\"",
      "  },",
      "  {",
      "      address: \"<TO_ADDRESS>\",",
      "      amount: ethers.utils.parseEther(\"1\"),",
      "      fromAddress: \"<FROM_ADDRESS>\"",
      "  }",
      "]",
      "",
      "",
      "",
      "transferFromBatch(example);"
    ],
    "description": "Transfer specific amounts of tokens from multiple addresses to another addresses in a batch"
  }
}
